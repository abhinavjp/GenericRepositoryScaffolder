<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="ModelType" type="EnvDTE.CodeType" #>
<#@ parameter name="ClassName" type="System.String" #>
<#@ parameter name="InterfaceName" type="System.String" #>
<#@ parameter name="InterfaceNameSpace" type="System.String" #>
<#@ parameter name="NameSpace" type="System.String" #>
using System;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using <#= InterfaceNameSpace #>;


namespace <#= NameSpace #>
{
    public abstract partial class <#= ClassName #><TEntity, TContext> : <#= InterfaceName #><TEntity, TContext> where TEntity : class where TContext : DbContext
    {
		internal TContext context;
        internal DbSet<TEntity> dbSet;

        public <#= ClassName #>(TContext context)
        {
            this.context = context;
            this.dbSet = context.Set<TEntity>();
        }

        public IQueryable<TEntity> All
        {
            get { return dbSet; }
        }

        public IQueryable<TEntity> AllIncluding(params Expression<Func<TEntity, object>>[] includeProperties)
        {
            IQueryable<TEntity> query = dbSet;
            foreach (var includeProperty in includeProperties)
            {
                query = query.Include(includeProperty);
            }
            return query;
        }

        public IQueryable<TEntity> FindWhere(Expression<Func<TEntity, bool>> conditionParam)
        {
            IQueryable<TEntity> query = dbSet;
            query = query.Where(conditionParam);
            return query;
        }

        public TEntity Find(int id)
        {
            return dbSet.Find(id);
        }

        public virtual void Insert(TEntity TEntry)
        {
            dbSet.Add(TEntry);
        }

        public virtual void Update(TEntity TEntry)
        {
            context.Entry(TEntry).State = EntityState.Modified;
        }

        public void Delete(int id)
        {
            var item = dbSet.Find(id);
            dbSet.Remove(item);
        }    
    }

	public abstract partial class <#= ClassName #><TEntity, TContext>
    {
        //Insert your custom methods to interact with context here(If you want to)
    }
}