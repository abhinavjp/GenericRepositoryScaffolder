<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="ModelType" type="EnvDTE.CodeType" #>
<#@ parameter name="InterfaceName" type="System.String" #>
<#@ parameter name="NameSpace" type="System.String" #>
using System;
using System.Linq;
using System.Linq.Expressions;


namespace <#= NameSpace #>
{
    public interface <#= InterfaceName #><T>
    {
        IQueryable<T> All { get; }
        IQueryable<T> AllIncluding(params Expression<Func<T, object>>[] includeProperties);
        IQueryable<T> FindWhere(Expression<Func<T, bool>> conditionParam);
        T Find(int id);
        void Insert(T TEntry);
        void Update(T TEntry);
        void Delete(int id);
        void Save();
    }
}