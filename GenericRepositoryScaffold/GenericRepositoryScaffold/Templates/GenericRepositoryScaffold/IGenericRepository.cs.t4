<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="ModelType" type="EnvDTE.CodeType" #>
<#@ parameter name="InterfaceName" type="System.String" #>
<#@ parameter name="NameSpace" type="System.String" #>
using System;
using System.Linq;
using System.Data.Entity;
using System.Linq.Expressions;


namespace <#= NameSpace #>
{
    public interface <#= InterfaceName #><TEntity, TContext> where TEntity : class where TContext : DbContext
    {
        IQueryable<TEntity> All { get; }
        IQueryable<TEntity> AllIncluding(params Expression<Func<TEntity, object>>[] includeProperties);
        IQueryable<TEntity> FindWhere(Expression<Func<TEntity, bool>> conditionParam);
        TEntity Find(int id);
        void Insert(TEntity TEntry);
        void Update(TEntity TEntry);
        void Delete(int id);
    }
}